package proof

import (
	"context"
	"crypto/sha256"
	"encoding/base64"

	"github.com/aws/aws-sdk-go/service/kms"
	"github.com/btcsuite/btcd/btcec"
	"github.com/mr-tron/base58"

	"github.com/workdaycredentials/ledger-common/util"
)

type SecP256K1KMSSigner struct {
	KeyID *string
	Svc   *kms.KMS
	Ctx   context.Context
}

func (s SecP256K1KMSSigner) Type() KeyType {
	return EcdsaSecp256k1KeyType
}

func (s SecP256K1KMSSigner) ID() string {
	return *s.KeyID
}

func (s SecP256K1KMSSigner) Sign(toSign []byte) ([]byte, error) {
	signingAlgorithm := kms.SigningAlgorithmSpecEcdsaSha256

	signInput := &kms.SignInput{
		Message:          toSign,
		KeyId:            s.KeyID,
		SigningAlgorithm: &signingAlgorithm,
	}

	signOutput, err := s.Svc.SignWithContext(s.Ctx, signInput)
	if err != nil {
		return nil, err
	}

	return signOutput.Signature, nil
}

type Secp256K1Verifier struct {
	PublicKey []byte
}

func (v *Secp256K1Verifier) Type() KeyType {
	return EcdsaSecp256k1KeyType
}

func (v *Secp256K1Verifier) Verify(data, signature []byte) (bool, error) {
	ecdsaPubKey, err := btcec.ParsePubKey(v.PublicKey, btcec.S256())
	if err != nil {
		return false, err
	}
	btcecSignature, err := btcec.ParseSignature(signature, btcec.S256())
	if err != nil {
		return false, err
	}
	hash := sha256.Sum256(data)
	return btcecSignature.Verify(hash[:], ecdsaPubKey), nil
}

// TODO This method should be deprecated in place of signature suite validation
// VerifySecp256k1Signature decodes the base64 message and verifies that the Secp256k1 digital
// signature was generated by the private key associated with publicKeyDerBase58.
func VerifySecp256k1Signature(publicKeyDerBase58, messageBase64, signatureBase58 string) (bool, error) {
	publicKey, err := util.ExtractPublicKeyFromBase58Der(publicKeyDerBase58)
	if err != nil {
		return false, err
	}

	kB64 := base64.StdEncoding.EncodeToString(publicKey)

	msgDecoded, err := base64.StdEncoding.DecodeString(messageBase64)
	if err != nil {
		return false, err
	}
	hash := sha256.Sum256(msgDecoded)

	pubKeyXY, err := base64.StdEncoding.DecodeString(kB64)
	if err != nil {
		return false, err
	}

	decoded, err := base58.Decode(signatureBase58)
	if err != nil {
		return false, err
	}

	// btcec lib
	btcecSignature, err := btcec.ParseSignature(decoded, btcec.S256())
	if err != nil {
		return false, err
	}
	ecdsaPubKey, err := btcec.ParsePubKey(pubKeyXY, btcec.S256())
	if err != nil {
		return false, err
	}
	return btcecSignature.Verify(hash[:], ecdsaPubKey), nil
}
